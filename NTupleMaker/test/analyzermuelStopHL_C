#define analyzer_cxx
#include "analyzer.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TString.h>
//#include "plots.h"
#include <cmath>
#include <sstream>
#include <iomanip>
#include "TChain.h"
#include "TH1.h"
#include "TTree.h"
#include "TKey.h"
#include "Riostream.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TLegend.h"
#include "TROOT.h"
#include "TFrame.h"
#include "TGaxis.h"
#include "TStyle.h"
#include <vector>
#include <iostream>
#include <algorithm>
#include "TList.h"
#include <string>
#include "TObject.h"
#include "TBranch.h"
#include <functional>
#include "TAxis.h"
#include "TChain.h"
#include "TMath.h"
#include "Riostream.h"
#include <iostream>
#include <fstream>



using namespace std;




void analyzer::Loop(){

	if (fChain == 0) return;
	CutList.clear();
	CutList.push_back("");
	CutList.push_back("No cut");
	CutList.push_back("mu-el");
	CutList.push_back("3rd lepV");
	CutList.push_back("njets<5");
	CutList.push_back("btag<2");
	CutList.push_back("Zmass"); 
	CutList.push_back("MET>50");
	CutList.push_back("DR<3");
	CutList.push_back("JetsCuts");
	CutList.push_back("HToMET");
	CutList.push_back("MeffLepton");
	CutList.push_back("Extra1");
	CutList.push_back("Extra2");
	CutList.push_back("Extra3");
	CutList.push_back("Extra4");

	string channel = "muel";
	string Channel = "muel";
	//ChiMass = 0;
	ChiMass = 0.;
	//cout<<" THE MASS IS ========================= "<<ChiMass<<endl;
	 int CutNumb = int(CutList.size());
         int iCFCounter[CutNumb];
	 double CFCounter[CutNumb];
	 for (int i=0;i < CutNumb; i++){
                        CFCounter[i] = 0;
           	        CFCounter_[i] = 0;
                        iCFCounter[i] = 0;
        }
	fChain->GetEntry(0);  
	string old = datasetName->c_str();
	int counter = 0;
		
	//char hist_[100];
	bool doTree= false;
	bool isData = false;
	bool isTT = false;
	bool isWJ = false;
	bool isDY = false;
	bool isDYee = false;
	bool isDYmm = false;
	bool isDYnunu = false;
	bool isDYhigh = false;
	bool isDYlow = false;
	bool isZTT = false;
	bool isDYNJ = false;
	bool isWNJ = false;
	bool isNJ = false;
	bool isSignal = false;
	bool isSUSY = false;
	bool cut_btag = true;
	
	bool t = true;
	bool f = false;
	bool InvertLeptonIso = LEPTONHERE;
	//bool HighInvertLeptonIso = HIGHISO;
	string Sign = "SIGNHERE";
	
	double Ptmiss=-9999;
	double MTl1=-999;
	double MTsum=-999;
	double MTl2=-999;
	double MTtot=-999;
	double charge_=-999;
	double dPhi=-999;
	double dEta=-999;
	double PT0=-999;
	double HText=-999;
	double muPt=-999;
	double tauPt=-999;
	double all_weights = 1;
	
	string systematic="Nominal";

	string cut = to_string(t);
	cout <<"  "<<cut.c_str()<<endl;
	char plots_[100];
	string data = "Single";
	string tt = "TT_TuneCUETP8M2T4_13TeV-powheg-pythia8";
	string wj = "WJetsToLNu";
	string wj1 = "W1JetsToLNu";
	string wj2 = "W2JetsToLNu";
	string wj3 = "W3JetsToLNu";
	string wj4 = "W4JetsToLNu";
	string dyj = "DYJetsToLL";
	string dyjhigh = "DYJetsToLL_M-50";
	string dyjlow = "DYJetsToLL_M-5to";
	string dyjlow2 = "DYJetsToLL_M-10to";
	string dyj1 = "DY1JetsToLL";
	string dyj2 = "DY2JetsToLL";
	string dyj3 = "DY3JetsToLL";
	string dyj4 = "DY4JetsToLL";
	string ztt = "isZTT";
	string ttw = "TTWJetsToLNu";
	string signalStop = "stop";
	string N0part = "0J_";
	string N1part = "1J_";
	string N2part = "2J_";
	string N3part = "3J_";
	string N4part = "4J_";
	bool isW0Part = false;
	bool isW1Part = false;
	bool isW2Part = false;
	bool isW3Part = false;
	bool isW4Part = false;
	bool isDY0Part = false;
	bool isDY1Part = false;
	bool isDY2Part = false;
	bool isDY3Part = false;
	bool isDY4Part = false;
	if (string::npos != old.find(data)) isData= true;
	
	if (string::npos != old.find(signalStop)) isSUSY = true;

	if (string::npos != old.find(tt)) isTT= true;
	if (string::npos != old.find(wj)) isWJ= true;
	if (string::npos != old.find(ttw)) isWJ= false;
	if (string::npos != old.find(dyj)) isDY= true;
	if (string::npos != old.find(dyjhigh)) isDYhigh= true;
	if (string::npos != old.find(dyjlow) || string::npos != old.find(dyjlow2)) isDYlow= true;
	if (string::npos != old.find(dyj1) || string::npos != old.find(dyj2) || string::npos != old.find(dyj3) || string::npos != old.find(dyj4)) isDYNJ = true;
	if ((string::npos != old.find(wj1) || string::npos != old.find(wj2) || string::npos != old.find(wj3) || string::npos != old.find(wj4)) && string::npos == old.find(ttw)) isWNJ= true;
	isNJ = isDYNJ || isWNJ;

	
	if (isSignal) cout<<" YOU HAVE FOUND ITTTTTTTTT is it signal ???  "<<isSignal<<" systematic "<<systematic<<endl;
	if (isData) cout<<" YOU HAVE FOUND a DATA "<<endl;

	 TString fileinName = "/afs/cern.ch/user/a/alkaloge/work/HLLHC/CMSSW_8_0_29/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE/FILEIN";
        if (systematic == "JetEnUp" || systematic == "JetEnDown"  || systematic == "UnclEnDown" || systematic == "UnclEnDown" || systematic == "TauEnUp" || systematic == "TauEnDown" || systematic == "ElEnUp" || systematic == "ElEnDown" || systematic == "MuEnUp" || systematic == "MuEnDown" || systematic == "BTagUp" || systematic == "BTagDown")
        {fileinName ="/afs/cern.ch/user/a/alkaloge/work/HLLHC/CMSSW_8_0_29/src/DesyTauAnalyses/NTupleMaker/test/CHANNELHERE_"+systematic+"/FILEIN";}


	TFile * filein = new TFile(fileinName,"read");
		
	TFile * file = new TFile("plots.root","recreate");
	file->cd();


	string fln = filein->GetName();
	if (string::npos != fln.find(ztt)) isZTT= true;
	if (string::npos == fln.find(ztt)) isZTT= false;



	TH1D * histW ;

	if (systematic == "ScalesUp" ) histW = (TH1D*)filein->Get("muel/histWeightsScalesUp");
	else if (systematic == "ScalesDown" ) histW = (TH1D*)filein->Get("muel/histWeightsScalesDown");
	else if (systematic == "PDFUp" ) histW = (TH1D*)filein->Get("muel/histWeightsPDFUp");
	else if (systematic == "PDFDown" ) histW = (TH1D*)filein->Get("muel/histWeightsPDFDown");
	else  {histW = (TH1D*)filein->Get("muel/histWeightsH");}


	if (string::npos != fln.find(N0part) && (isWJ || isWNJ)) isW0Part= true;
	if (string::npos != fln.find(N1part) && (isWJ || isWNJ)) isW1Part= true;
	if (string::npos != fln.find(N2part) && (isWJ || isWNJ)) isW2Part= true;
	if (string::npos != fln.find(N3part) && (isWJ || isWNJ)) isW3Part= true;
	if (string::npos != fln.find(N4part) && (isWJ || isWNJ)) isW4Part= true;
	if (string::npos != fln.find(N0part) && isDYhigh) isDY0Part= true;
	if (string::npos != fln.find(N1part) && isDYhigh) isDY1Part= true;
	if (string::npos != fln.find(N2part) && isDYhigh) isDY2Part= true;
	if (string::npos != fln.find(N3part) && isDYhigh) isDY3Part= true;
	if (string::npos != fln.find(N4part) && isDYhigh) isDY4Part= true;


	histW->SetName("histWeightsH");
	histW->SetTitle("histWeightsH");

	float Nw = 1;

	

	file->mkdir(Channel.c_str());
	file->cd(Channel.c_str());
	Long64_t nentries = fChain->GetEntriesFast();
	char Nplots[10];
	int DoNoCut = 0;
	if (DoNoCut>9)
	sprintf (Nplots,"_No_%i",DoNoCut);
	else 
	sprintf (Nplots,"");

	SetupHists(CutNumb, Nplots);


		cout<<" will process "<<nentries<<" dataset "<<datasetName->c_str()<<" Nplots "<<Nplots<< endl;

	Long64_t nbytes = 0, nb = 0;

	int is0partons=0;
	int is1partons=0;
	int is2partons=0;
	int is3partons=0;
	int is4partons=0;




	for (Long64_t jentry=0; jentry<nentries;jentry++) {
		Long64_t ientry = LoadTree(jentry);

		if (ientry < 0) break;
		nb = fChain->GetEntry(jentry);   nbytes += nb;
		float all_weights = 1.;

		if (mu_relIso[0] > 0.2) continue;
		if (el_relIso[1] > 0.2) continue;

		bool isDYTauTau = false;
		bool isDYll = false;
		npart=npartons;

		if ((isDY  ||  isDYNJ) && isDYTT>0.5) isDYTauTau = true;
		if ((isDY  ||  isDYNJ) && isDYEE>0.5) isDYee = true;
		if ((isDY  ||  isDYNJ) && isDYMM>0.5) isDYmm = true;
		if ((isDY  ||  isDYNJ) && isDYNuNu>0.5) isDYnunu = true;

		if ((isDY  ||  isDYNJ) && isDYTT<0.5) isDYll = true;
		if ((isDY || isDYNJ) && isZTT && !isDYTauTau) continue;
		if ((isDY || isDYNJ) && !isZTT && !isDYll) continue;


	if (muon_index <0 || electron_index <0) continue;

	Int_t l1_index = muon_index;
	Int_t l2_index = electron_index;
	Int_t l3_index = muon_index;

		float charge_ =mu_charge[muon_index]  * el_charge[electron_index];

		if ( charge_ > 0. ) continue;


		//cout<<" "<<jentry<<"  "<<" dataset "<<datasetName->c_str()<<"  partons "<<npartons<<" isW2part "<<isW2Part<<" genHT "<<genHT<<" isHTa "<<isHTa<<"  "<<isHTb<<"  "<<isHTc<<"  "<<isHTd<<" stitch "<<stitchflag<<endl;
	

		if ( jentry%50000 ==0 ) cout<<" working for you...processed " <<jentry<<" events from "<<nentries<<" dataset "<<datasetName->c_str()<<" weight "<<all_weights<< " partons "<<npartons<<"  "<<isW0Part<<"  "<<isW1Part<<"  "<<isW2Part<<endl;
		

		JetsMV.clear();
		MuMV.clear();
		ElMV.clear();
		TauMV.clear();
		btag_index.clear();

			JetsV.SetPxPyPzE(0.,0.,0.,0.);
			TauV.SetPxPyPzE(0.,0.,0.,0.);
	for (int nj=0;nj<njets;++nj) {
	int jet_index = jets_cleaned[nj];
	JetsV.SetPxPyPzE(0.,0.,0.,0.);
	JetsV.SetPxPyPzE(jet_px[jet_index], jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
	JetsMV.push_back(JetsV);
	}

	float met = -1;
		
		METV.SetPx(met_ex);
		METV.SetPy(met_ey);
		met= sqrt(met_ex*met_ex + met_ey*met_ey);  




		if(muon_index<0 || electron_index<0) continue;

if(muon_index>-1 )			LeptV1.SetPtEtaPhiM(mu_pt[muon_index], mu_eta[muon_index], mu_phi[muon_index], muonMass);

if(electron_index>-1 )			LeptV2.SetPtEtaPhiM(el_pt[electron_index], el_eta[electron_index], el_phi[electron_index],electronMass);
					LeptV3.SetPtEtaPhiM(0,0,0,0);



if (systematic == "JetEnUp" )
{

                JetsMV.clear();

        for (int nj=0;nj<njets;++nj) {
        int jet_index = jets_cleaned[nj];
        JetsV.SetPxPyPzE(0.,0.,0.,0.);
        JetsV.SetPxPyPzE(jet_px[jet_index]*(1+JES->GetBinContent(JES->FindBin(jet_px[jet_index]))), jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
        JetsMV.push_back(JetsV);
        }

                METV.SetPx(met_ex*(1+0.005));
                METV.SetPy(met_ey*(1+0.005));
                met= sqrt(met_ex*met_ex + met_ey*met_ey)*(1+0.005);

}


if (systematic == "JetEnDown" )
{

                JetsMV.clear();

        for (int nj=0;nj<njets;++nj) {
        int jet_index = jets_cleaned[nj];
        JetsV.SetPxPyPzE(0.,0.,0.,0.);
        JetsV.SetPxPyPzE(jet_px[jet_index]*(1-JES->GetBinContent(JES->FindBin(jet_px[jet_index]))), jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
        JetsMV.push_back(JetsV);
        }

                METV.SetPx(met_ex*(1+0.005));
                METV.SetPy(met_ey*(1+0.005));
                met= sqrt(met_ex*met_ex + met_ey*met_ey)*(1+0.005);

}


if (systematic == "JetResDown" && taus_index>-1 )
{

                JetsMV.clear();

        for (int nj=0;nj<njets;++nj) {
        int jet_index = jets_cleaned[nj];
        JetsV.SetPxPyPzE(0.,0.,0.,0.);
        JetsV.SetPxPyPzE(jet_px[jet_index]*(1-JER->GetBinContent(JER->FindBin(jet_px[jet_index]))), jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
        JetsMV.push_back(JetsV);
        }

                METV.SetPx(met_ex*(1-0.003));
                METV.SetPy(met_ey*(1-0.003));
                met= sqrt(met_ex*met_ex + met_ey*met_ey)*(1-0.003);

}


if (systematic == "JetResUp" && taus_index>-1 )
{

                JetsMV.clear();

        for (int nj=0;nj<njets;++nj) {
        int jet_index = jets_cleaned[nj];
        JetsV.SetPxPyPzE(0.,0.,0.,0.);
        JetsV.SetPxPyPzE(jet_px[jet_index]*(1+JER->GetBinContent(JER->FindBin(jet_px[jet_index]))), jet_py[jet_index],jet_pz[jet_index],jet_e[jet_index]);
        JetsMV.push_back(JetsV);
        }

                METV.SetPx(met_ex*(1+0.003));
                METV.SetPy(met_ey*(1+0.003));
                met= sqrt(met_ex*met_ex + met_ey*met_ey)*(1+0.003);

}



	bool doObjectMET=false;

	if (doObjectMET){
        TLorentzVector vMETsum = (-1)*LeptV1 + (-1)*LeptV2;
        for (unsigned int i = 0; i <   JetsMV.size(); i++) vMETsum = vMETsum-JetsMV.at(i);

	METV = vMETsum;
	met=sqrt(vMETsum.Px()*vMETsum.Px() + vMETsum.Py()*vMETsum.Py());
		}








		int iCut = 1;

		all_weights = gen_weight ;

		int CutN=0;


////////////////////////////////////////////////////////////////////////////

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		if ( el_relIso[0] > 0.2)  continue;
		if ( mu_relIso[0] > 0.2)  continue;


		if ( fabs(el_charge[electron_index]) !=1 ) continue;
		if ( fabs(mu_charge[muon_index]) !=1 ) continue;


		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (event_thirdLeptonVeto >0.5) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
	

//////////////////////////////////////////////////////////////////////////////

	///////////// Tree filled variables
		double sumpT=0;
		PT0 = 0;
		HText = 0;
		HText  = LeptV1.Pt();
		if (JetsMV.size()>0) {
			for (unsigned int ij=0;ij<JetsMV.size();ij++){
				sumpT+=JetsMV.at(ij).Pt();
				if(ij==0)	PT0=JetsMV.at(ij).Pt();
				HText += JetsMV.at(ij).Pt();
			}}
		double HTOsqrtMET= -1 ; if (sumpT > 0) HTOsqrtMET = sumpT/(sqrt(METV.Pt()));
		double HTOMET= -1 ; if (sumpT > 0) HTOMET = sumpT/(METV.Pt());

		double MeffHTMETOsqrMET= ( (sumpT + LeptV1.Pt() + LeptV2.Pt() + METV.Pt())/sqrt(METV.Pt()));
		double MeffLepton= sumpT + LeptV1.Pt() + LeptV2.Pt() + METV.Pt();
		double MeffLept1= sumpT + LeptV1.Pt() + METV.Pt();
		double MeffLept2= sumpT + LeptV2.Pt() + METV.Pt();

		dEta = LeptV1.Eta() - LeptV2.Eta();

		TLorentzVector DiL = LeptV1 + LeptV2;

		if (DiL.M()<20) continue;

     		double dPhi=dPhiFrom2P( LeptV1.Px(), LeptV1.Py(), METV.Px(),  METV.Py() );
         	MTl1=-999;MTl1=sqrt(2*LeptV1.Pt()*met*(1-TMath::Cos(dPhi)));

     		double dPhil2=dPhiFrom2P( LeptV2.Px(), LeptV2.Py(), METV.Px(),  METV.Py() );
         	MTl2 = -999;MTl2=sqrt(2*LeptV2.Pt()*met*(1-TMath::Cos(dPhil2)));
		MTsum=-999;MTsum = MTl1+MTl2;
		MTtot = sqrt(MTl1*MTl1 + MTl2*MTl2);
		Ptmiss = METV.Pt();

		double dPhiDil = dPhiFrom2P( DiL.Px(), DiL.Py(), METV.Px(),  METV.Py() );
		double MTdil = sqrt(2*DiL.Pt()*met*(1-TMath::Cos(dPhiDil)));
		double Dr=deltaR(LeptV1.Eta(), LeptV1.Phi(),
		                  LeptV2.Eta(),LeptV2.Phi());

	///////////////////////


		if (DoNoCut !=iCut && njets>4) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (DoNoCut !=iCut && nbtagM>1) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;


		//if (DoNoCut !=iCut && MTl1<120) continue;
		//if (DoNoCut !=iCut && MTl2<120) continue;
		if (  DiL.M() >50  && DiL.M()<80) continue;

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;



		if (DoNoCut !=iCut && met<80.) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

	

		double dPhiL=dPhiFrom2P(LeptV1.Px() ,  LeptV1.Py() ,LeptV2.Px() ,  LeptV2.Py() );

		if (DoNoCut !=iCut && Dr>3) continue;
		if (DoNoCut !=iCut && fabs(dEta)>2) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
		
	
		if (JetsMV.size()>0 && JetsMV.at(0).Pt()>400) continue;
		if (JetsMV.size()>1 && JetsMV.at(1).Pt()>150) continue;
		if (JetsMV.size()>2 && JetsMV.at(2).Pt()>100) continue;
		if (JetsMV.size()>3 && JetsMV.at(3).Pt()>80) continue;

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (DoNoCut !=iCut && HTOMET>7) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (DoNoCut !=iCut && MeffHTMETOsqrMET<20) continue;
		if (DoNoCut !=iCut && MeffHTMETOsqrMET>90) continue;
		if (DoNoCut !=iCut && MeffLepton<300) continue;
		if (DoNoCut !=iCut &&  fabs(LeptV1.Eta())> 2) continue;
		if (DoNoCut !=iCut &&  fabs(LeptV1.Pt())> 250) continue;
		if (DoNoCut !=iCut &&  fabs(LeptV2.Eta())> 2) continue;
		if (DoNoCut !=iCut &&  fabs(LeptV2.Pt())> 150) continue;

		if (DoNoCut !=iCut &&  fabs(LeptV1.Pt())< 30) continue; //added for ConfC
		if (DoNoCut !=iCut &&  fabs(LeptV2.Pt())< 30) continue; // aded for ConfCm

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
	
		double detaj = -10;
		if (JetsMV.size()>1) detaj=deltaEta(JetsMV.at(0).Px() ,  JetsMV.at(0).Py() , JetsMV.at(0).Pz() , JetsMV.at(1).Px() ,  JetsMV.at(1).Py() , JetsMV.at(1).Pz());
 	        if (DoNoCut !=iCut && JetsMV.size()>1 && fabs(detaj)>3 ) continue;
		if (DoNoCut !=iCut && HTOMET>5) continue;
		//if (JetsMV.size()>1) cout<<fabs(detaj)<<"  "<<fabs(JetsMV.at(0).Eta()-JetsMV.at(1).Eta())<<endl;
			
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

		if (DiL.M()<80) continue;
		if (DoNoCut !=iCut && MeffLept1<250) continue;
		if (DoNoCut !=iCut && MeffLept2<250) continue;
		if (DoNoCut !=iCut && Dr<1) continue;

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;
	
		//MCTb < 200
  	        //double mcta = sqrt( 2* LeptV1.Pt()* LeptV2.Pt()*(1+cos( LeptV1.Phi()- LeptV2.Phi())) );
		//if (mcta>200) continue;
		//if (mcta<20) continue;
		if (DoNoCut !=iCut && MTl1<40) continue;
		if (DoNoCut !=iCut && MTl2<40) continue;
		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

	//	if (DoNoCut !=iCut && met<80) continue;
		if (DoNoCut !=iCut && met>350) continue;
		if (DoNoCut !=iCut && HTOMET>4) continue;
		if (DiL.Pt() < 30 && DiL.Pt()>200) continue;

		FillHistsDiL(iCut, all_weights, LeptV1, LeptV2, LeptV3, JetsMV, METV, channel, l1_index,l2_index,l3_index);
		CFCounter[iCut]+= all_weights;
		CFCounter_[iCut]+= all_weights;
                iCFCounter[iCut]++;
		iCut++;

}

	float Lumi = 3000000.;

	if (isData) Lumi = 1.;
		 for(int ci = 0; ci < CutNumb; ci++)
                        {
                                // tfile << CutList[ci]<<"\t & \t"
                                //          << CFCounter[ci]  <<"\t & \t"<< statUnc[ci] <<"\t & \t"<< iCFCounter[ci] << endl;
                                		CutFlowUnW->SetBinContent(1+ci,0);
                        if (CutNumb < 2)       CutFlowUnW->SetBinContent(1+ci,CFCounter_[ci]);
                           else  
 					CutFlowUnW->SetBinContent(1+ci,float(CFCounter[ci]) );
				

					cout<<" Count "<<ci<<" binContent "<<CutFlowUnW->GetBinContent(1+ci)<<"  CFCounter_ "<<CFCounter_[ci]<<" CFCounter "<<CFCounter[ci]<<" iCFCounter "<<iCFCounter[ci]<<" Name "<<CutFlowUnW->GetXaxis()->GetBinLabel(1+ci)<<" entry  "<<CutFlowUnW->GetBinContent(1+ci)<<endl;			

}


			cout<<"  end from TH1D "<<endl;

		CutFlowUnW->Write();
		histW->Write();
		file->Write();
		file->Close();
		cout<<" Failed events  "<<counter<<endl;
	}
/////////////////////////////////////////////

